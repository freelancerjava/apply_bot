{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/projects/dashboard-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/projects/dashboard-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { strapi } from \"../../axios\";\nexport var getSrcByGq = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var query, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = \"\\n    query {\\n        srcObjects{\\n          id\\n          name\\n        }\\n      }               \\n    \";\n            _context.next = 3;\n            return strapi.request(\"POST\", \"/graphql\", {\n              data: {\n                query: query\n              }\n            });\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data.data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getSrcByGq() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getDeviceByGq = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var query, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            query = \"\\n    query {\\n        devices{\\n          id\\n          name\\n        }\\n      }               \\n    \";\n            _context2.next = 3;\n            return strapi.request(\"POST\", \"/graphql\", {\n              data: {\n                query: query\n              }\n            });\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getDeviceByGq() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getUtilsByGq = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key, _ref3) {\n    var date, query, data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            date = _ref3.date;\n            query = \"\\n    query {\\n        srcObjects(sort:\\\"id:asc\\\"){\\n          id\\n          name\\n        }\\n        devices(sort:\\\"id:asc\\\"){\\n          id\\n          name\\n        }\\n        records(sort:\\\"id:asc\\\", where:{date: \\\"\".concat(date, \"\\\"}){\\n          id\\n          count\\n          give_data\\n          give_k\\n          give_skk\\n          date\\n          command{\\n            id\\n          }\\n          src_object{\\n            id\\n          }\\n          device{\\n            id\\n          }\\n        }\\n      }             \\n    \"); // console.log(\"query\", query);\n\n            _context3.next = 4;\n            return strapi.request(\"POST\", \"/graphql\", {\n              data: {\n                query: query\n              }\n            });\n\n          case 4:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data.data);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getUtilsByGq(_x, _x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var createRecord = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref5) {\n    var data, records, tempData, tempRecords;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            data = _ref5.data, records = _ref5.records;\n            // console.log(data.records);\n            // console.log(records);\n            tempData = [];\n            data.records.map(function (item) {\n              return tempData.push(item.id);\n            });\n            tempRecords = [];\n            records.map(function (item) {\n              return tempRecords.push(item.id);\n            });\n            tempRecords.map(function (item, key) {\n              if (!tempData.includes(item)) strapi.deleteEntry('records', item);\n            });\n            data.records.map(function (item, key) {\n              if (item.id) strapi.updateEntry('records', item.id, item);else strapi.createEntry('records', item);\n            }); // const data = await strapi.updateEntry('records', records)\n            // return data\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function createRecord(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getSrcByGq, \"getSrcByGq\", \"/home/ubuntu/projects/dashboard-template/src/features/records/query.js\");\n  reactHotLoader.register(getDeviceByGq, \"getDeviceByGq\", \"/home/ubuntu/projects/dashboard-template/src/features/records/query.js\");\n  reactHotLoader.register(getUtilsByGq, \"getUtilsByGq\", \"/home/ubuntu/projects/dashboard-template/src/features/records/query.js\");\n  reactHotLoader.register(createRecord, \"createRecord\", \"/home/ubuntu/projects/dashboard-template/src/features/records/query.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/ubuntu/projects/dashboard-template/src/features/records/query.js"],"names":["strapi","getSrcByGq","query","request","data","getDeviceByGq","getUtilsByGq","key","date","createRecord","records","tempData","map","item","push","id","tempRecords","includes","deleteEntry","updateEntry","createEntry"],"mappings":";;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AAEA,OAAO,IAAMC,UAAU;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,KADkB;AAAA;AAAA,mBASLF,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AACpDC,cAAAA,IAAI,EAAE;AACJF,gBAAAA,KAAK,EAAEA;AADH;AAD8C,aAAnC,CATK;;AAAA;AASlBE,YAAAA,IATkB;AAAA,6CAcjBA,IAAI,CAACA,IAdY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVH,UAAU;AAAA;AAAA;AAAA,GAAhB;AAiBP,OAAO,IAAMI,aAAa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBH,YAAAA,KADqB;AAAA;AAAA,mBASRF,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AACpDC,cAAAA,IAAI,EAAE;AACJF,gBAAAA,KAAK,EAAEA;AADH;AAD8C,aAAnC,CATQ;;AAAA;AASrBE,YAAAA,IATqB;AAAA,8CAcpBA,IAAI,CAACA,IAde;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbC,aAAa;AAAA;AAAA;AAAA,GAAnB;AAkBP,OAAO,IAAMC,YAAY;AAAA,uEAAG,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,YAAAA,IAAd,SAAcA,IAAd;AACpBN,YAAAA,KADoB,uOAWmBM,IAXnB,kTA+B1B;;AA/B0B;AAAA,mBAgCPR,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AACpDC,cAAAA,IAAI,EAAE;AACJF,gBAAAA,KAAK,EAAEA;AADH;AAD8C,aAAnC,CAhCO;;AAAA;AAgCpBE,YAAAA,IAhCoB;AAAA,8CAqCnBA,IAAI,CAACA,IArCc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZE,YAAY;AAAA;AAAA;AAAA,GAAlB;AAwCP,OAAO,IAAMG,YAAY;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASL,YAAAA,IAAT,SAASA,IAAT,EAAeM,OAAf,SAAeA,OAAf;AAC1B;AACA;AACIC,YAAAA,QAHsB,GAGX,EAHW;AAI1BP,YAAAA,IAAI,CAACM,OAAL,CAAaE,GAAb,CAAiB,UAAAC,IAAI;AAAA,qBAAIF,QAAQ,CAACG,IAAT,CAAcD,IAAI,CAACE,EAAnB,CAAJ;AAAA,aAArB;AACIC,YAAAA,WALsB,GAKR,EALQ;AAM1BN,YAAAA,OAAO,CAACE,GAAR,CAAY,UAAAC,IAAI;AAAA,qBAAIG,WAAW,CAACF,IAAZ,CAAiBD,IAAI,CAACE,EAAtB,CAAJ;AAAA,aAAhB;AAEAC,YAAAA,WAAW,CAACJ,GAAZ,CAAgB,UAACC,IAAD,EAAON,GAAP,EAAe;AAC7B,kBAAI,CAACI,QAAQ,CAACM,QAAT,CAAkBJ,IAAlB,CAAL,EAA8Bb,MAAM,CAACkB,WAAP,CAAmB,SAAnB,EAA8BL,IAA9B;AAC/B,aAFD;AAIAT,YAAAA,IAAI,CAACM,OAAL,CAAaE,GAAb,CAAiB,UAACC,IAAD,EAAON,GAAP,EAAe;AAC9B,kBAAIM,IAAI,CAACE,EAAT,EAAaf,MAAM,CAACmB,WAAP,CAAmB,SAAnB,EAA8BN,IAAI,CAACE,EAAnC,EAAuCF,IAAvC,EAAb,KACKb,MAAM,CAACoB,WAAP,CAAmB,SAAnB,EAA8BP,IAA9B;AACN,aAHD,EAZ0B,CAiB1B;AACA;;AAlB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZJ,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;;;;;;;0BA3EMR,U;0BAiBAI,a;0BAkBAC,Y;0BAwCAG,Y","sourcesContent":["import { strapi } from \"../../axios\";\r\n\r\nexport const getSrcByGq = async () => {\r\n  const query = `\r\n    query {\r\n        srcObjects{\r\n          id\r\n          name\r\n        }\r\n      }               \r\n    `\r\n  const data = await strapi.request(\"POST\", \"/graphql\", {\r\n    data: {\r\n      query: query\r\n    }\r\n  })\r\n  return data.data;\r\n}\r\n\r\nexport const getDeviceByGq = async () => {\r\n  const query = `\r\n    query {\r\n        devices{\r\n          id\r\n          name\r\n        }\r\n      }               \r\n    `\r\n  const data = await strapi.request(\"POST\", \"/graphql\", {\r\n    data: {\r\n      query: query\r\n    }\r\n  })\r\n  return data.data;\r\n}\r\n\r\n\r\nexport const getUtilsByGq = async (key, { date }) => {\r\n  const query = `\r\n    query {\r\n        srcObjects(sort:\"id:asc\"){\r\n          id\r\n          name\r\n        }\r\n        devices(sort:\"id:asc\"){\r\n          id\r\n          name\r\n        }\r\n        records(sort:\"id:asc\", where:{date: \"${date}\"}){\r\n          id\r\n          count\r\n          give_data\r\n          give_k\r\n          give_skk\r\n          date\r\n          command{\r\n            id\r\n          }\r\n          src_object{\r\n            id\r\n          }\r\n          device{\r\n            id\r\n          }\r\n        }\r\n      }             \r\n    `\r\n\r\n  // console.log(\"query\", query);\r\n  const data = await strapi.request(\"POST\", \"/graphql\", {\r\n    data: {\r\n      query: query\r\n    }\r\n  })\r\n  return data.data;\r\n}\r\n\r\nexport const createRecord = async ({ data, records }) => {\r\n  // console.log(data.records);\r\n  // console.log(records);\r\n  let tempData = []\r\n  data.records.map(item => tempData.push(item.id))\r\n  let tempRecords = []\r\n  records.map(item => tempRecords.push(item.id))\r\n\r\n  tempRecords.map((item, key) => {\r\n    if (!tempData.includes(item)) strapi.deleteEntry('records', item)\r\n  })\r\n\r\n  data.records.map((item, key) => {\r\n    if (item.id) strapi.updateEntry('records', item.id, item)\r\n    else strapi.createEntry('records', item)\r\n  })\r\n\r\n  // const data = await strapi.updateEntry('records', records)\r\n  // return data\r\n}\r\n"]},"metadata":{},"sourceType":"module"}