{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/projects/mynetwork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ubuntu/projects/mynetwork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport { strapi } from \"../../../../axios\";\nexport var getLogByGq = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, _ref) {\n    var date, id, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            date = _ref.date, id = _ref.id;\n            _context.next = 3;\n            return strapi.request(\"POST\", \"/graphql\", {\n              data: {\n                query: \"\\n            query {\\n                logs{\\n                  position,\\n                  head,\\n                  count_ls,\\n                  start,\\n                  end,\\n                  command{\\n                    name,\\n                    id\\n                  },\\n                }\\n              }\\n                       \\n            \"\n              }\n            });\n\n          case 3:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data.data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getLogByGq(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getLogsByGq = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, _ref3) {\n    var date, id, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            date = _ref3.date, id = _ref3.id;\n            _context2.next = 3;\n            return strapi.request(\"POST\", \"/graphql\", {\n              data: {\n                query: \"\\n            query {\\n                logs{\\n                  id,\\n                  position,\\n                  head,\\n                  count_ls,\\n                  start,\\n                  end,\\n                  command{\\n                    name,\\n                    id\\n                  },\\n                }\\n              }\\n                       \\n            \"\n              }\n            });\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.data);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getLogsByGq(_x3, _x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var createLog = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(formData) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return strapi.createEntry('logs', formData);\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function createLog(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(getLogByGq, \"getLogByGq\", \"/home/ubuntu/projects/mynetwork/src/features/otryad/query/logs/index.js\");\n  reactHotLoader.register(getLogsByGq, \"getLogsByGq\", \"/home/ubuntu/projects/mynetwork/src/features/otryad/query/logs/index.js\");\n  reactHotLoader.register(createLog, \"createLog\", \"/home/ubuntu/projects/mynetwork/src/features/otryad/query/logs/index.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/home/ubuntu/projects/mynetwork/src/features/otryad/query/logs/index.js"],"names":["strapi","getLogByGq","key","date","id","request","data","query","getLogsByGq","createLog","formData","createEntry"],"mappings":";;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAEA,OAAO,IAAMC,UAAU;AAAA,uEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,YAAAA,IAAd,QAAcA,IAAd,EAAoBC,EAApB,QAAoBA,EAApB;AAAA;AAAA,mBACHJ,MAAM,CAACK,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AAClDC,cAAAA,IAAI,EAAE;AACFC,gBAAAA,KAAK;AADH;AAD4C,aAAnC,CADG;;AAAA;AAChBD,YAAAA,IADgB;AAAA,6CAoBfA,IAAI,CAACA,IApBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVL,UAAU;AAAA;AAAA;AAAA,GAAhB;AAuBP,OAAO,IAAMO,WAAW;AAAA,uEAAG,kBAAON,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAcC,YAAAA,IAAd,SAAcA,IAAd,EAAoBC,EAApB,SAAoBA,EAApB;AAAA;AAAA,mBACJJ,MAAM,CAACK,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AAClDC,cAAAA,IAAI,EAAE;AACFC,gBAAAA,KAAK;AADH;AAD4C,aAAnC,CADI;;AAAA;AACjBD,YAAAA,IADiB;AAAA,8CAqBhBA,IAAI,CAACA,IArBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXE,WAAW;AAAA;AAAA;AAAA,GAAjB;AAwBP,OAAO,IAAMC,SAAS;AAAA,uEAAG,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFV,MAAM,CAACW,WAAP,CAAmB,MAAnB,EAA2BD,QAA3B,CADE;;AAAA;AACfJ,YAAAA,IADe;AAAA,8CAEdA,IAFc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATG,SAAS;AAAA;AAAA;AAAA,GAAf;;;;;;;;;;0BA/CMR,U;0BAuBAO,W;0BAwBAC,S","sourcesContent":["import { strapi } from \"../../../../axios\";\r\n\r\nexport const getLogByGq = async (key, { date, id }) => {\r\n    const data = await strapi.request(\"POST\", \"/graphql\", {\r\n        data: {\r\n            query: `\r\n            query {\r\n                logs{\r\n                  position,\r\n                  head,\r\n                  count_ls,\r\n                  start,\r\n                  end,\r\n                  command{\r\n                    name,\r\n                    id\r\n                  },\r\n                }\r\n              }\r\n                       \r\n            `}\r\n    })\r\n    return data.data;\r\n}\r\n\r\nexport const getLogsByGq = async (key, { date, id }) => {\r\n    const data = await strapi.request(\"POST\", \"/graphql\", {\r\n        data: {\r\n            query: `\r\n            query {\r\n                logs{\r\n                  id,\r\n                  position,\r\n                  head,\r\n                  count_ls,\r\n                  start,\r\n                  end,\r\n                  command{\r\n                    name,\r\n                    id\r\n                  },\r\n                }\r\n              }\r\n                       \r\n            `}\r\n    })\r\n    return data.data;\r\n}\r\n\r\nexport const createLog = async (formData) => {\r\n    const data = await strapi.createEntry('logs', formData)\r\n    return data;\r\n}"]},"metadata":{},"sourceType":"module"}